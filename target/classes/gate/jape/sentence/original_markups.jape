/*
* converts original markups ( annotation from the xml file) to starndard gate annotations.
*/
Phase: original_markups
Input:  Token
Options: control = once
  
/* rule */
Rule: MarkupAnnotator
Priority:90	
({Token}):text
-->
{
// obtains the annotation. (NOT USED)
AnnotationSet splitAS = (AnnotationSet)bindings.get("text");

// getting all the annotations from the original xml markups
AnnotationSet originalAS = doc.getAnnotations("Original markups");

// filtering only the required annotations from the original markups. required annotations are added in an arraylist.
ArrayList<String> markupList = new ArrayList<String>();
markupList.add("paragraph");
markupList.add("section");
markupList.add("chapter");

// processing only the required annotations in the arraylist
for (String markup: markupList){
	AnnotationSet paraAS = originalAS.get(markup);
	Iterator<Annotation> paraIter = paraAS.iterator();
	
	// for each required annotation, reads the features and produces as a standard annotation
	while ( paraIter.hasNext()){
			Annotation paraAnn = paraIter.next();		
			
			// adding features to the annotation
			FeatureMap features = paraAnn.getFeatures();
			features.put("rule","MarkupAnnotator");
			
			// adding string of the annotation to the fetures. It needs start and end node offsets as int values 
			int sNode = paraAnn.getStartNode().getOffset().intValue();
			int eNode = paraAnn.getEndNode().getOffset().intValue();
			features.put("startNode",sNode);
			features.put("endNode", eNode);
			String text = doc.getContent().toString().substring(sNode, eNode);	
			features.put("text",text.trim());
			
			// finally adding the feature with the annotation
			outputAS.add(paraAnn.getStartNode(),paraAnn.getEndNode(), markup,features);	
	}//  while	
}// for markup list		
}