/*
*
*/
Phase: subject
Input:  Token Obligation Split 
Options: control = appelt 

// making short names for the categories
Macro: CC ( {Token.category== CC})
Macro: CD ( {Token.category == CD})
Macro: COMMA ( {Token.string == ","})
Macro: NNP ( {Token.category == NNP}) :nnp
Macro: NNPS ( {Token.category == NNPS}):nnps
Macro: JJ ({Token.category == JJ}):jj
Macro: NN ({Token.category == NN}):nn
Macro: NNS ( {Token.category == NNS}):nns
Macro: VBN ({Token.category == VBN}):vbn
Macro: VBNS ({Token.category == VBNS}):vbns
Macro: DT ({Token.category == DT})
Macro: IN ({Token.category == IN})
Macro: POS ({Token.category == POS})
Macro: PRP ({Token.category == PRP})
Macro: PRP_D ({Token.category == "PRP$"})
Macro: PRPR_D ({Token.category == "PRPR$"})
Macro: LRB ( {Token.category == LRB}) //-LRB- - -unknown-
Macro: VBD ({Token.category == VBD}):vbd
Macro: VBG ({Token.category == VBG}):vbg
Macro: OBL ({Obligation})
Macro: TKN ({Token})
Macro: SPLIT ({Split})
//Macro: SPACE ({SpaceToken})



Macro: CONJ (
 (CC) | (COMMA)
)

Macro: CD_ALL (
// three, four
	(CD)+
)

Macro: VB_ADJ (
	(	{!Token.string =~ "is"} |
		{!Token.string =~ "was"}|
		{!Token.string =~ "were"}|
		{!Token.string =~ "has"}|
		{!Token.string =~ "have"}|
		{!Token.string =~ "had"}|
		{!Token.string =~ "be"}
	)

	(VBD | VBG | VBN )
)

Macro: VBADJ_ALL (
	(CONJ)? (VB_ADJ)
)

// Macro: NO_SPLIT (
	// {!Split}
// )

Macro: NO_OBL (
 {!obligation}
)


Macro: VBN_ALL (
//  Materials to be reprocessed/VBN or reworked/VBN should be appropriately controlled to 
	((CONJ)?(VBN)) |
	VBADJ_ALL
)

Macro: JJ_ALL (
	(CONJ)?(JJ)	
)

Macro: POS_ALL (
 ((POS)|(PRP_D)|(PRPR_D)):sub
)

Macro: NNP_ALL (
		(CONJ)?
		(	((NNP) (NNPS)?) |
			((NNPS) (NNP)?) 
		)			
)

// 
Macro: NN_ALL (
		(CONJ)?	
		(	((NN) (NNS)?) |
			((NNS) (NN)?) 
		)		
)


Macro: NOUN (
	(CONJ)? (DT)? (POS_ALL)? 
	(	((VBN_ALL)|(JJ_ALL)| (NN_ALL)| (NNP_ALL))|
		(JJ_ALL | VBN_ALL) (NN_ALL	| NNP_ALL)
	) 
)



Rule: nnSubject 
Priority:100(
 NN
)
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("nn");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("category","nn");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "PotentialSubject",features);
}

Rule: nnsSubject 
Priority:90(
 NNS
)
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("nns");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("category","nns");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "PotentialSubject",features);
}

Rule: nnpSubject 
Priority:80(
 NNP
)
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("nnp");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("category","nnp");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "PotentialSubject",features);
}

Rule: nnpsSubject 
Priority:70(
 NNPS
)
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("nnps");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("category","nnps");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "PotentialSubject",features);
}

Rule: jjSubject 
Priority:60(
 JJ
)
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("jj");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("category","jj");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "PotentialSubject",features);
}















