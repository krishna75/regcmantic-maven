/**
* defines concepts.
* based on noun and adjectives combination.
*/
Phase: concept
Input:  Token obligation  concept_lookup
Options: control = appelt 

/* simple macros */
Macro: CC ( {Token.category== CC})
Macro: CD ( {Token.category == CD})
Macro: COMMA ( {Token.string == ","})
Macro: NNP ( {Token.category == NNP}) 
Macro: NNPS ( {Token.category == NNPS})
Macro: NN ({Token.category == NN})
Macro: NNS ( {Token.category == NNS})
Macro: JJ ({Token.category == JJ})
Macro: VBN ({Token.category == VBN})
Macro: VBNS ({Token.category == VBNS})
Macro: DT ({Token.category == DT})
Macro: IN ({Token.category == IN})
Macro: POS ({Token.category == POS})
Macro: PRP ({Token.category == PRP})
Macro: PRP_D ({Token.category == "PRP$"})
Macro: PRPR_D ({Token.category == "PRPR$"})
Macro: LRB ( {Token.category == LRB}) //-LRB- - -unknown-
Macro: VBD ({Token.category == VBD})
Macro: VBG ({Token.category == VBG})
Macro: OBL ({obligation})
Macro: TKN ({Token})
//Macro: SPLIT ({Split})
Macro: SPACE ({SpaceToken})
Macro: CONCEPT ({concept_lookup})

/* complex macros */
Macro: CONJ ((CC) | (COMMA))
Macro: CD_ALL ((CD)+)// three, four
Macro: VB_ADJ (
	(	{!Token.string =~ "is"} |
		{!Token.string =~ "was"}|
		{!Token.string =~ "were"}|
		{!Token.string =~ "has"}|
		{!Token.string =~ "have"}|
		{!Token.string =~ "had"}|
		{!Token.string =~ "be"}
	)
	(VBD | VBG | VBN )
)
Macro: VBADJ_ALL ((CONJ)? (VB_ADJ))
//Macro: NO_SPLIT ( {!Split})
Macro: NO_OBL ({!obligation})
Macro: VBN_ALL (((CONJ)?(VBN)) | VBADJ_ALL)//  Materials to be reprocessed/VBN or reworked/VBN should be appropriately controlled to 
Macro: JJ_ALL ((JJ)	)
Macro: POS_ALL (((POS)|(PRP_D)|(PRPR_D)))
Macro: NNP_ALL (
	((NNP) (NNPS)?) |
	((NNPS) (NNP)?) 		
)
Macro: NN_ALL (
	((NN) (NNS)?) |
	((NNS) (NN)?) 		
)
Macro: NOUN (	
		NN_ALL |
		NNP_ALL |
		CONCEPT
)
Macro: NOUN_ALL ((NOUN)[1,3])

/*  rule: */
Rule: ConceptFinder 
Priority:90
(
(NOUN)[1,3]|
 JJ_ALL (NOUN)[1,2]
):sub
-->
{
// obtains the annotation
gate.AnnotationSet annSet = (gate.AnnotationSet)bindings.get("sub");

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","ConceptFinder");
features.put("kind","defined");

// adding string to the feature
int sNode = annSet.firstNode().getOffset().intValue();
int eNode = annSet.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
// setting output
outputAS.add(annSet.firstNode(), annSet.lastNode(), "concept",features);
}















