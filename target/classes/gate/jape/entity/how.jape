/**
* Identifies adverbs that answers "how".
*/
Phase:how
Input:  Token obligation action
Options: control =  brill

/* simple macros */
Macro: TOKEN 	({Token})
Macro: RB 		({Token.category == RB}) //RB - adverb: most words ending in ‘-ly’. Also ‘quite’, ‘too’, ‘very’, ‘enough’, ‘indeed’, ‘not’, ‘-n’t’, and ‘never’.
Macro: RBR 		({Token.category == RBR}) //RBR - adverb - comparative: adverbs ending with ‘-er’ with a comparative meaning.
Macro: RBS 		({Token.category == RBS}) //RBS - adverb - superlative
Macro: AND 		({Token.string == "and"})
Macro: OR		({Token.string == "or"})
Macro: COMMA	({Token.string == ","})
Macro: AS	({Token.string == "as"})
Macro: OBL 		({obligation})
Macro: ACT		({action})


/* complex macros */
Macro: ADVERB 	(RB | RBR | RBS)
Macro: CONJ 	(AND|OR|COMMA)
Macro: HOW (
	( OBL (ADVERB):how ) |
	( OBL (ADVERB)((CONJ) (ADVERB):how)[1,3]) |
	( (ADVERB):how ) ACT |
	( (ADVERB)((CONJ) (ADVERB):how)[1,3] ACT) |
	( ACT (ADVERB):how ) |
	( ACT(ADVERB)((CONJ) (ADVERB):how)[1,3]) |
	( ACT (AS ADVERB AS):how )
)


/* rule: */
Rule: HowFinder	 
Priority:90
(
	HOW
)
-->
{
// obtains the annotation
gate.AnnotationSet howAS = (gate.AnnotationSet)bindings.get("how");
gate.Annotation howAnn = (gate.Annotation)howAS.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","HowFinder");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = howAS.firstNode().getOffset().intValue();
int eNode = howAS.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);

/* Filtering Relevant Annotations */ 
// the unwanted annotations are added to an arraylist. 
ArrayList<String> removableList = new ArrayList<String>();
removableList.add("away");
removableList.add("as");
removableList.add("also");
removableList.add("otherwise");
removableList.add("only");
removableList.add("not");

boolean found = false;
// checking if the annotation is in the unwanted list
for (String removableWord: removableList){
	if (theWord.toLowerCase().equals(removableWord.toLowerCase())){
		found= true;
	}
}
// ensuring only the annotations which are not present in the unwanted list are added
if (found==false){
	outputAS.add(howAS.firstNode(), howAS.lastNode(), "how",features);
}
}





