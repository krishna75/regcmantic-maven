/*
*
*/
Phase: statement_finder
Input:  Regulation 
Options: control = appelt


Rule: StatementFinder 
Priority:100	
	({Regulation}): reg	
-->
{
	// obtains the annotation
	AnnotationSet regAS = (AnnotationSet)bindings.get("reg");
	//AnnotationSet senAS = inputAS.get("Sentence", regAS.firstNode().getOffset(), regAS.lastNode().getOffset());
	AnnotationSet senAS = inputAS.
							getContained(regAS.firstNode().getOffset(), 
							regAS.lastNode().getOffset()).
							get("Sentence");
							
	Node textStartNode = inputAS.
							getContained(regAS.firstNode().getOffset(), 
							regAS.lastNode().getOffset()).
							get("RegText").iterator().next().getStartNode();
	long textStart = textStartNode.getOffset();
								

	// sentence counter
	int countSen = 1;
	//Out.prln("size = "+senAS.size());
	for (Annotation senAnn: senAS)
	{
		// adding features to the annotation
		FeatureMap features = Factory.newFeatureMap();
		features.put("rule","StatementFinder");
		
		long start = senAnn.getStartNode().getOffset();
		long end = senAnn.getEndNode().getOffset();
		
		/* if it is the first sentence then start the sentence after reg_id (avoid reg_id) */
		Node startNode;
		
		if (textStart>start && textStart<end ){
			startNode = new NodeImpl(textStartNode.getId(), textStartNode.getOffset()+1);
		} else {
			startNode = senAnn.getStartNode();
		}
		
		// adding string of the annotation to the fetures. It needs start and end node offsets as int values
		int intStart = startNode.getOffset().intValue();
		int intEnd = senAnn.getEndNode().getOffset().intValue();
		features.put("startNode",intStart);
		features.put("endNode", intEnd);
		String text = doc.getContent().toString().substring(intStart, intEnd);	
		features.put("text",text);
		
		// finally adding the feature with the annotation. 
		outputAS.add(startNode, senAnn.getEndNode(), "Statement",features); 
		
		// it counts the sentence
		countSen++;		
	}
}