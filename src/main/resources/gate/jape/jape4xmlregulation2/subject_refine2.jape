/*
Algorithm: 2
 It selects the "potential subject" annotations between the begining of the sentence and the obligation
 and confirms as "subject" annotations. 
 Note: Use this file for algorithm 2 or the other file for algorithm 1. But never use the both.
*/
Phase: subject_refiner
Input:   Statement PotentialSubject
Options: control = all

/*rule */
Rule: SubjectRefiner2
Priority:100
(
  ({Statement}):sen
)
-->
{
	/*  1. Get the sentence */
	AnnotationSet senAS = (AnnotationSet) bindings.get("sen");

	/*  2. Get the contained obligation annotation */
	AnnotationSet oblAS = inputAS.getContained(senAS.firstNode().getOffset(), 
                                               senAS.lastNode().getOffset()).
											   get("Obligation");
											   
	//  proceed only if there is an obligation annotation in the statement (sentence)
	if (oblAS.size()>0)
	{			
		/*  3. Get the subject annotations between start of the sentence and start of the obligation */	
		Iterator<Annotation> subIter = inputAS.getContained( senAS.firstNode().getOffset(), 
								oblAS.firstNode().getOffset()).
								get("PotentialSubject").iterator();	
		
		/*  4. Confirm the selected subject annotations */
		while ( subIter.hasNext())
		{
			Annotation subAnn = subIter.next();
			
			// adding features to the annotation
			FeatureMap features = Factory.newFeatureMap();
			features.put("rule","SubjectRefiner2");
			
			// adding string of the annotation to the fetures. It needs start and end node offsets as int values 
			int sNode = subAnn.getStartNode().getOffset().intValue();
			int eNode = subAnn.getEndNode().getOffset().intValue();
			features.put("startNode",sNode);
			features.put("endNode", eNode);
			String text = doc.getContent().toString().substring(sNode, eNode);		
			features.put("text",text);
			
			// finally adding the feature with the annotation
			outputAS.add(subAnn.getStartNode(),subAnn.getEndNode(), "Subject",features);

			// remove the potential subject
			// inputAS.remove(subAnn);			
		}//  while																					
	}//  if		
}

Rule: RemovePotentialSubject 
Priority:10 
(
  ({PotentialSubject}):sub
)
-->
{
	/*  1. Get the potential subject */
	AnnotationSet subAS = (AnnotationSet) bindings.get("sub");
	Iterator<Annotation>  subIter = subAS.iterator();
	while (subIter.hasNext()){
		Annotation subAnn = subIter.next();
		inputAS.remove(subAnn);	
	}
}
