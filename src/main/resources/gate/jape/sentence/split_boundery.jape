/*
* identifies splits  with in a pagraph and annotates start and end points of a sentence
* based on the split.
* ( Note: sentence splitter splits sentences from full stop).
*/
Phase: original_markups
Input:  Split
Options: control=appelt
  

/* rule */
Rule: SplitBoundary
Priority:90	
 ({Split}):text
-->
{
// obtains the annotation
AnnotationSet paraAS = (AnnotationSet)bindings.get("text");

// differences between start and end node of first and last nodes.
int diff = 1 ;
int nodeId = 99992;

/* defines  split start annotation*/
// defining first  node offsets
int firstStart = paraAS.firstNode().getOffset().intValue()+1;
int firstEnd = firstStart+diff;

// defining new nodes (NodImpl)
NodeImpl firstNodeStart = new NodeImpl( new Integer(nodeId + firstStart*2), new Long(firstStart));
NodeImpl firstNodeEnd= new NodeImpl( new Integer(nodeId + firstEnd*2), new Long(firstEnd));

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","SplitBoundary");
features.put("type","split");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
features.put("startNode",firstStart);
features.put("endNode", firstEnd);
features.put("text","");
	
// finally adding the feature with the annotation. 
outputAS.add(firstNodeStart, firstNodeEnd, "sentence_start",features);

/* defines  split end annotation */
// defining last node offsets
int lastEnd = paraAS.lastNode().getOffset().intValue();
int lastStart = lastEnd-diff;

// defining new nodes (NodImpl)
NodeImpl lastNodeStart = new NodeImpl( new Integer(nodeId + lastStart*2), new Long(lastStart));
NodeImpl lastNodeEnd= new NodeImpl( new Integer(nodeId + lastEnd*2), new Long(lastEnd));

// adding features to the annotation
gate.FeatureMap features2 = Factory.newFeatureMap();
features2.put("rule","SplitBoundary");
features2.put("type","split");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
features2.put("startNode",lastStart);
features2.put("endNode", lastEnd);
features2.put("text","");
	
// finally adding the feature with the annotation. 
outputAS.add(lastNodeStart, lastNodeEnd, "sentence_end",features2);
	
}