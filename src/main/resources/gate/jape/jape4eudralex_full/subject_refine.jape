/*
 It trims the coverage of the subAS at the oblAnnigation of a sentence. In other
 words, it specifies the potential subAS before the oblAnnigation as the subjets and 
 ignores the rest.
*/

Phase: subAsubAnn
Input:  PotentialsubAnn Sentence
Options: control = appelt




Rule: SubRefiner
Priority:100
(
  ({Sentence}):sen
)
-->
{
   /* 1. Get the sentence annotations and its senAS (to use for start and end points) */
   AnnotationSet senAS    = (gate.AnnotationSet) bindings.get("sen");

   /* 2. Get all the contained subject annotations */
   Iterator<Annotation>  subIter = inputAS.getContained(senAS.firstNode().getOffset(), 
                                               senAS.lastNode().getOffset()).get("PotentialsubAnn").
											   iterator();
   Annotation subAnn;

   /* 3. Get all the contained oblAnnigation annotations */
   AnnotationSet oblAnnAS = inputAS.getContained(senAS.firstNode().getOffset(), 
                                               senAS.lastNode().getOffset()).get("oblAnnigation");
	/* 4. for each obigation*/										   
   if (oblAnnAS.iterator().hasNext()) {										   
	   Annotation  oblAnn = oblAnnAS.iterator().next(); 
	   int startNode = oblAnn.getEndNode().getOffset().intValue();  
	   
	   /* 4.1.  for each subject  */
	   while (subIter.hasNext()) {
			  subAnn  = subIter.next();
			  int endNode = subAnn.getStartNode().getOffset().intValue();
			  
			  /*  If subject annotation starts before the obligation, confirm the subject */
			  if (startNode> endNode) {
				gate.FeatureMap features = Factory.newFeatureMap();
				features.put("rule","SubRefiner");
				
				
				 /*  adding string of the annotation to the fetures. It needs start and end node offsets as int values */
				int sNode = subAnn.getStartNode().getOffset().intValue();
				int eNode = subAnn.getEndNode().getOffset().intValue();
				features.put("startNode",sNode);
				features.put("endNode", eNode);
				String theWord = doc.getContent().toString().substring(sNode, eNode);		
				features.put("string",theWord);
				
				outputAS.add(subAnn.getStartNode(),subAnn.getEndNode(), "Subject",features);			  
			  }
		}
	} 
	 
}

Rule: RemoveAnnotation 
Priority:10 
(
  ({PotentialsubAnn}):pSub
)
-->
{
	inputAS.removeAll(bindings.get("pSub"));
}
