Phase:obligation
Input:  Lookup  Token
Options: control = appelt


Macro: CC ( {Token.category == CC}) //CC - coordinating conjunction: ‘and’, ‘but’, ‘nor’, ‘or’, ‘yet’, plus, minus, less, times (multiplication), over (division). Also ‘for’ (because) and ‘so’ (i.e., ‘so that’).
Macro: CD ( {Token.category == CD}) //CD - cardinal number
Macro: DT ( {Token.category == DT}) //DT - determiner: Articles including ‘a’, ‘an’, ‘every’, ‘no’, ‘the’, ‘another’, ‘any’, ‘some’, ‘those’.
Macro: CD ( {Token.category == CD}) //EX - existential there: Unstressed ‘there’ that triggers inversion of the inflected verb and the logical subject; ‘There was a party in progress’.
Macro: FW ( {Token.category == FW}) //FW - foreign word
Macro: IN ( {Token.category == IN}) //IN - preposition or subordinating conjunction
Macro: JJ ( {Token.category == JJ}) //JJ - adjective: Hyphenated compounds that are used as modifiers; happy-go-lucky.
Macro: JJR ( {Token.category == JJR}) //JJR - adjective - comparative: Adjectives with the comparative ending ‘-er’ and a comparative meaning. Sometimes ‘more’ and ‘less’.
Macro: JJS ( {Token.category == JJS}) //JJS - adjective - superlative: Adjectives with the superlative ending ‘-est’ (and ‘worst’). Sometimes ‘most’ and ‘least’.
Macro: JJSS ( {Token.category == JJSS} )//JJSS - -unknown-, but probably a variant of JJS
Macro: LRB ({Token.category == LRB}) //-LRB- - -unknown-
Macro: LS ( {Token.category == LS}) //LS - list item marker: Numbers and letters used as identifiers of items in a list.
Macro: MD ( {Token.category == MD}) //MD - modal: All verbs that don’t take an ‘-s’ ending in the third person singular present: ‘can’, ‘could’, ‘dare’, ‘may’, ‘might’, ‘must’, ‘ought’, ‘shall’, ‘should’, ‘will’, ‘would’.
Macro: NN ( {Token.category == NN}) //NN - noun - singular or mass
Macro: NNP ( {Token.category == NNP}) //NNP - proper noun - singular: All words in names usually are capitalized but titles might not be.
Macro: NNPS ( {Token.category == NNPS}) //NNPS - proper noun - plural: All words in names usually are capitalized but titles might not be.
Macro: NNS ( {Token.category == NNS}) //NNS - noun - plural
Macro: NP ( {Token.category == NP}) //NP - proper noun - singular
Macro: NPS ( {Token.category == NPS}) //NPS - proper noun - plural
Macro: PDT ( {Token.category == PDT}) //PDT - predeterminer: Determiner like elements preceding an article or possessive pronoun; ‘all/PDT his marbles’, ‘quite/PDT a mess’.
Macro: POS ( {Token.category == POS}) //POS - possessive ending: Nouns ending in ‘’s’ or ‘’’.
Macro: PP ( {Token.category == PP}) //PP - personal pronoun
Macro: PRPR_D ({Token.category == "PRPR$"}) //PRPR$ - unknown-, but probably possessive pronoun
Macro: PRP ( {Token.category == PRP}) //PRP - unknown-, but probably possessive pronoun
Macro: PRP_D ({Token.category == "PRP$"}) //PRP$ - unknown, but probably possessive pronoun,such as ‘my’, ‘your’, ‘his’, ‘his’, ‘its’, ‘one’s’, ‘our’, and ‘their’.
Macro: RB ( {Token.category == RB}) //RB - adverb: most words ending in ‘-ly’. Also ‘quite’, ‘too’, ‘very’, ‘enough’, ‘indeed’, ‘not’, ‘-n’t’, and ‘never’.
Macro: RBR ( {Token.category == RBR}) //RBR - adverb - comparative: adverbs ending with ‘-er’ with a comparative meaning.
Macro: RBS ( {Token.category == RBS}) //RBS - adverb - superlative
Macro: RP ( {Token.category == RP}) //RP - particle: Mostly monosyllabic words that also double as directional adverbs.
Macro: STAART ( {Token.category == STAART}) //STAART - start state marker (used internally)
Macro: SYM ( {Token.category == SYM}) //SYM - symbol: technical symbols or expressions that aren’t English words.
Macro: TO ( {Token.category == TO}) //TO - literal to
Macro: UH ( {Token.category == UH}) //UH - interjection: Such as ‘my’, ‘oh’, ‘please’, ‘uh’, ‘well’, ‘yes’.
Macro: VBD ( {Token.category == VBD}) //VBD - verb - past tense: includes conditional form of the verb ‘to be’; ‘If I were/VBD rich...’.
Macro: VBG ( {Token.category == VBG}) //VBG - verb - gerund or present participle
Macro: VBN ( {Token.category == VBN}) //VBN - verb - past participle
Macro: VBP ( {Token.category == VBP}) //VBP - verb - non-3rd person singular present
Macro: VB ( {Token.category == VB}) //VB - verb - base form: subsumes imperatives, infinitives and subjunctives.
Macro: VBZ ( {Token.category == VBZ}) //VBZ - verb - 3rd person singular present
Macro: WDT ( {Token.category == WDT}) //WDT - wh-determiner
Macro: WP_D ( {Token.category == "WD_D"}) //WP$ - possessive wh-pronoun: includes ‘whose’
Macro: WP ( {Token.category == WP}) //WP - wh-pronoun: includes ‘what’, ‘who’, and ‘whom’.
Macro: WRB ( {Token.category == WRB}) //WRB - wh-adverb: includes ‘how’, ‘where’, ‘why’. Includes ‘when’ when used in a temporal sense.

Macro: COLON ( {Token.category == "::"}) //:: - literal colon
Macro: COMMA ( {Token.category == ","}) //, - literal comma
Macro: DOLLAR ( {Token.category == "$"}) //$ - literal dollar sign
// Macro: DOUBLE_DASH ( {Token.category == "-"}) //- - literal double-dash
// Macro: DOUBLE_QUOTE ( {Token.category == "\""}) //- literal double quotes
// Macro: CD ( {Token.category == CD}) //- literal grave
// Macro: CD ( {Token.category == CD}) //( - literal left parenthesis
// Macro: CD ( {Token.category == CD}) //. - literal period
// Macro: CD ( {Token.category == CD}) //# - literal pound sign
// Macro: CD ( {Token.category == CD}) //) - literal right parenthesis
// Macro: CD ( {Token.category == CD}) //- literal single quote or apostrophe


Macro: CONJ (
 (CC) | (COMMA)
)

Macro: ADVERB (
 (RB)| (RBR)|(RBS)
)


Macro: OBL_STRONG ({Lookup.majorType == obligation,Lookup.minorType==strong})
Macro: OBL_STRONGNEG ({Lookup.majorType == obligation,Lookup.minorType==strong_neg})
Macro: OBL_MOD ({Lookup.majorType == obligation,Lookup.minorType==moderate})
Macro: OBL_MODNEG ({Lookup.majorType == obligation,Lookup.minorType==moderate_neg})
Macro: OBL_SOFT ({Lookup.majorType == obligation,Lookup.minorType==soft})
Macro: OBL_SOFTNEG ({Lookup.majorType == obligation,Lookup.minorType==soft_neg})


Rule: StrongObligation
Priority:100
(
 // e.g. should normally be ordered
	(OBL_STRONG) 
	//( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","StrongObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Strong");
features.put("type", "Positive");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}

Rule: StrongNegObligation
Priority:90
(
 // e.g. should normally be ordered
	(OBL_STRONGNEG) 
	//( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","StrongNegObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Strong");
features.put("type", "Negative");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}

Rule: ModerateObligation
Priority:80
(
 // e.g. should normally be ordered
	(OBL_MOD) 
	//( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","ModerateObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Moderate");
features.put("type", "Positive");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}

Rule: ModerateNegObligation
Priority:70
(
 // e.g. should normally be ordered
	(OBL_MODNEG) 
	( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","ModerateNegObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Moderate");
features.put("type", "Negative");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}

Rule: SoftObligation
Priority:60
(
 // e.g. should normally be ordered
	(OBL_SOFT) 
	( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","SoftObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Soft");
features.put("type", "Positive");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}

Rule: SoftNegObligation
Priority:50
(
 // e.g. should normally be ordered
	(OBL_SOFTNEG) 
	//( (ADVERB) ({Token.string == "be"}) )?
)  
:obligation

-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","SoftNegObligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("string",theWord);
features.put("strength","Soft");
features.put("type", "Negative");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "Obligation",features);
}