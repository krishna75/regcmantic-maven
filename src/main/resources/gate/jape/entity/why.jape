/**
* Identifies the phrase that answers "why".
*/
Phase:why
Input:  Lookup Token SpaceToken  action  sentence_end
Options: control = first

/* simple macros */
Macro: TOKEN 		({Token})
Macro: SPACETOKEN 	({SpaceToken})
Macro: SEN_END 		({sentence_end})
Macro: PARA_END 	({paragraph_end})
Macro: ACT			({action})
Macro: PURPOSE 		({Lookup.majorType == "purpose"})
Macro: VB 			({Token.category == VB}) 
Macro: VBG 			({Token.category == VBG}) 
Macro: TO			({Token.string== "to"}) 
Macro: FOR 			({Token.string== "for"}) 

/* complex macros */

Macro: END ( SEN_END | PARA_END)

Macro: WHY (
	(ACT ( (SPACETOKEN)[1,3] TO (SPACETOKEN)[1,3] VB(TOKEN|SPACETOKEN)+ ):why END)|
	(ACT ( (SPACETOKEN)[1,3] FOR (SPACETOKEN)[1,3] VBG (TOKEN|SPACETOKEN)+ ):why END)|
	((PURPOSE (TOKEN|SPACETOKEN)+ ):why END)
)

/* rule: */
Rule: WhyFinder	 
Priority:90
(
	WHY	
)
-->
{
// obtains the annotation
gate.AnnotationSet whyAS = (gate.AnnotationSet)bindings.get("why");
gate.Annotation whyAnn = (gate.Annotation)whyAS.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","WhyFinder");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = whyAS.firstNode().getOffset().intValue();
int eNode = whyAS.lastNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);

outputAS.add(whyAS.firstNode(), whyAS.lastNode(), "why",features);
}