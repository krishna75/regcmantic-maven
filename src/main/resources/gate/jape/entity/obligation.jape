/**
* Identifies obligations within a sentence.
* uses look up (gazetteer) for the purpose.
*/
Phase:obligation
Input:  Lookup  Token 
Options: control = appelt

/* basic macros */
Macro: CC ( {Token.category == CC}) //CC - coordinating conjunction: ‘and’, ‘but’, ‘nor’, ‘or’, ‘yet’, plus, minus, less, times (multiplication), over (division). Also ‘for’ (because) and ‘so’ (i.e., ‘so that’).
Macro: COMMA ( {Token.category == ","}) //, - literal comma
Macro: RB ( {Token.category == RB}) //RB - adverb: most words ending in ‘-ly’. Also ‘quite’, ‘too’, ‘very’, ‘enough’, ‘indeed’, ‘not’, ‘-n’t’, and ‘never’.
Macro: RBR ( {Token.category == RBR}) //RBR - adverb - comparative: adverbs ending with ‘-er’ with a comparative meaning.
Macro: RBS ( {Token.category == RBS}) //RBS - adverb - superlative

/*  obligation from the parsed sentencec*/
//MACRO: PARSED ({parsed_obligation}) 

/* complex macros */
Macro: CONJ (
 (CC) | (COMMA)
)
Macro: ADVERB (
 (RB)| (RBR)|(RBS)
)

/* obligation related macros */
Macro: OBL_STRONG ({Lookup.majorType == obligation,Lookup.minorType==strong})
Macro: OBL_STRONGNEG ({Lookup.majorType == obligation,Lookup.minorType==strong_neg})
Macro: OBL_MOD ({Lookup.majorType == obligation,Lookup.minorType==moderate})
Macro: OBL_MODNEG ({Lookup.majorType == obligation,Lookup.minorType==moderate_neg})
Macro: OBL_SOFT ({Lookup.majorType == obligation,Lookup.minorType==soft})
Macro: OBL_SOFTNEG ({Lookup.majorType == obligation,Lookup.minorType==soft_neg})


/* rule:  Strong Positive */
Rule: Strongobligation
Priority:100
(
	(OBL_STRONG) 
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","Strongobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Strong");
features.put("type", "Positive");

// finally adding the feature with the annotation. 
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}

/* rule:  Strong Negative */
Rule: StrongNegobligation
Priority:90
(
	(OBL_STRONGNEG) 
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","StrongNegobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Strong");
features.put("type", "Negative");

// finally adding the feature with the annotation. It needs first node, last node,
//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}

/* rule:  Moderate Positive */
Rule: Moderateobligation
Priority:80
(
	(OBL_MOD) 
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","Moderateobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Moderate");
features.put("type", "Positive");

//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}

/* rule: Moderate Negative */
Rule: ModerateNegobligation
Priority:70
(
	(OBL_MODNEG) 
	( (ADVERB) ({Token.string == "be"}) )?
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","ModerateNegobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Moderate");
features.put("type", "Negative");

//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}

/* rule:  Soft Positive */
Rule: Softobligation
Priority:60
(
	(OBL_SOFT) 
	( (ADVERB) ({Token.string == "be"}) )?
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","Softobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Soft");
features.put("type", "Positive");

//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}

/* rule: Soft Negative */
Rule: SoftNegobligation
Priority:50
(
	(OBL_SOFTNEG) 
):obligation
-->
{
// obtains the annotation
gate.AnnotationSet team = (gate.AnnotationSet)bindings.get("obligation");
gate.Annotation teamAnn = (gate.Annotation)team.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","SoftNegobligation");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = teamAnn.getStartNode().getOffset().intValue();
int eNode = teamAnn.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);
features.put("strength","Soft");
features.put("type", "Negative");

//the name off the annotation (type) to appear and the new features
outputAS.add(team.firstNode(), team.lastNode(), "obligation",features);
}