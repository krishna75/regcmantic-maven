/**
* Identifies actions.
*/
Phase:action
Input:  Token obligation 
Options: control =  brill

/* simple macros */
Macro: CC ( {Token.category == CC}) //CC - coordinating conjunction: ‘and’, ‘but’, ‘nor’, ‘or’, ‘yet’, plus, minus, less, times (multiplication), over (division). Also ‘for’ (because) and ‘so’ (i.e., ‘so that’).
Macro: RB ( {Token.category == RB}) //RB - adverb: most words ending in ‘-ly’. Also ‘quite’, ‘too’, ‘very’, ‘enough’, ‘indeed’, ‘not’, ‘-n’t’, and ‘never’.
Macro: RBR ( {Token.category == RBR}) //RBR - adverb - comparative: adverbs ending with ‘-er’ with a comparative meaning.
Macro: RBS ( {Token.category == RBS}) //RBS - adverb - superlative
Macro: VBD ( {Token.category == VBD}) //VBD - verb - past tense: includes conditional form of the verb ‘to be’; ‘If I were/VBD rich...’.
Macro: VBG ( {Token.category == VBG}) //VBG - verb - gerund or present participle
Macro: VBN ( {Token.category == VBN}) //VBN - verb - past participle
Macro: VBP ( {Token.category == VBP}) //VBP - verb - non-3rd person singular present
Macro: VB ( {Token.category == VB}) //VB - verb - base form: subsumes imperatives, infinitives and subjunctives.
Macro: VBZ ( {Token.category == VBZ}) //VBZ - verb - 3rd person singular present
Macro: COMMA ( {Token.category == ","}) //, - literal comma
Macro: PREP ({Token.category == IN})
Macro: OBL ({obligation})

/* complex macros */
Macro: CONJ (CC | COMMA)

Macro: ADVERB (RB | RBR | RBS)

Macro: VERB (VBN | 	VB | 	VBP | 	VBD |	VBG | 	VBZ )
Macro: VERB_PHRASE(VERB PREP)   // prepostion

// should be (appropriately) cleaned
Macro: ONE_ACTION(	OBL	(ADVERB)?	VERB )

// , appropriately desined
Macro: ACT_PART ((CONJ)+(ADVERB)? VERB)

// should be (appropriately) cleaned
// should be (appropriately) cleaned and (appropriately) stored
//should be (appropriately) cleaned ,(appropriately) stored, (carefully) handled and (appropriately) delivered.
Macro: ACTIONS(
	(	OBL(ADVERB)?(VERB ):action)  |
		ONE_ACTION(CONJ)+(ADVERB)?(VERB):action 	|
		ONE_ACTION (ACT_PART)+(CONJ)+(ADVERB)?(VERB):action 

)

/* rule: */
Rule: ActionFinder	 
Priority:90
(
	ACTIONS
)
-->
{
// obtains the annotation
gate.AnnotationSet actionSet = (gate.AnnotationSet)bindings.get("action");
gate.Annotation action = (gate.Annotation)actionSet.iterator().next();

// adding features to the annotation
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule","ActionFinder");

// adding string of the annotation to the fetures. It needs start and end node offsets as int values
int sNode = action.getStartNode().getOffset().intValue();
int eNode = action.getEndNode().getOffset().intValue();
features.put("startNode",sNode);
features.put("endNode", eNode);
String theWord = doc.getContent().toString().substring(sNode, eNode);		
features.put("text",theWord);

/* Filtering Relevant Annotations */ 
// the unwanted annotations are added to an arraylist. 
ArrayList<String> removableList = new ArrayList<String>();
removableList.add("is");
removableList.add("are");
removableList.add("be");
removableList.add("was");
removableList.add("been");
removableList.add("being");

boolean found = false;
// checking if the annotation is in the unwanted list
for (String removableWord: removableList){
	if (theWord.toLowerCase().equals(removableWord.toLowerCase())){
		found= true;
	}
}

// ensuring only the annotations which are not present in the unwanted list are added
if (found==false){
	outputAS.add(actionSet.firstNode(), actionSet.lastNode(), "rule_action",features);
}
}





